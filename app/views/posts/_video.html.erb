
    <h2>Videos</h2>
    <p><%= link_to 'Add video now via YouTube Link', new_video_path, class: 'btn btn-primary btn-lg' %> <br /> </p>

<div>
  <%= f.fields_for :video do |video_form| %>
    <div class="form-group">
      <%= video_form.label :link %>
      <%= video_form.text_field :link, class: 'form-control' %>
      <span class="help-block">A link to the video on YouTube.</span>
    </div>

  <% end %>

</div>

 <div id="widget"></div>
 <div id="player"></div>

<script>
      // 2. Asynchronously load the Upload Widget and Player API code.
      var tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. Define global variables for the widget and the player.
      // The function loads the widget after the JavaScript code has
      // downloaded and defines event handlers for callback notifications
      // related to the widget.
      var widget;
      var player;
      function onYouTubeIframeAPIReady() {
        widget = new YT.UploadWidget('widget', {
          width: 500,
          events: {
            'onUploadSuccess': onUploadSuccess,
            'onProcessingComplete': onProcessingComplete
          }
        });
      }

      // 4. This function is called when a video has been successfully uploaded.
      function onUploadSuccess(event) {
        $('#post_video_attributes_link').val(event.data.videoId);
      }

      // 5. This function is called when a video has been successfully processed.
      function onProcessingComplete(event) {
        player = new YT.Player('player', {
          height: 390,
          width: 640,
          videoId: event.data.videoId,
          events: {}
        });
      }
    </script>